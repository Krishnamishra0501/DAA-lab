#include <stdio.h>
#include <stdlib.h>
#include <limits.h>


int find(int parent[], int i) {
// Write your code here...
if(parent[i] != i)
	parent[i] = find(parent,parent[i]);
return parent[i];
}


void union1(int parent[], int rank[],int x,int y) {
	int xroot = find(parent,x);
	int yroot = find(parent,y);
	// Write your code here...

	if(rank[xroot] < rank[yroot]){
		parent[xroot] = yroot;
	}else if(rank[xroot] > rank[yroot]){
		parent[yroot] = xroot;
	}else{
		parent[yroot] = xroot;
		rank[xroot]++;
	}
}


void kruskalMST(int **cost, int V) {
	int parent[V],rank[V];
	for(int i =0;i<V;i++){
		parent[i] = i;
		rank[i]=0;
	}
	typedef struct{
	int u,v,w;
	
	}Edge;
	// Write your code here...
	Edge edges[V*V];
	int edgeCount = 0;


	for(int i =0;i<V;i++){
		for(int j=i+1;j<V;j++){
			if(cost[i][j] != 9999){
				edges[edgeCount].u = i;
				edges[edgeCount].v = j;
				edges[edgeCount].w = cost[i][j];
				edgeCount++;
			}
		}
	}
	for(int i=0;i<edgeCount - 1;i++){
		for(int j =0;j<edgeCount-i-1;j++){
			if(edges[j].w > edges[j + 1].w){
				Edge temp = edges[j];
				edges[j] = edges[j + 1];
				edges[j + 1] = temp;
			}
		}
	}
	int mstWeight = 0;
	int edgeWeight = 0;
	int edgeIndex = 0;
	for(int i =0,e = 0;e <V - 1 && edgeCount;i++){
		int u =edges[i].u;
		int v= edges[i].v;
		int w = edges[i].w;

		int set_u = find(parent,u);
		int set_v = find(parent,v);

		if(set_u != set_v){
			printf("Edge %d:(%d, %d) cost:%d\n",edgeIndex,u,v,w);
			mstWeight +=w;
			union1(parent,rank,set_u,set_v);
			e++;
			edgeIndex++;
		}
	}
	printf("Minimum cost= %d\n",mstWeight);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
